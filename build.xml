<?xml version="1.0" encoding="utf-8"?>

<project name="namedgraphs" default="all" basedir=".">

	<property name="project" value="ng4j"/>
	<property name="version" value="0.9.3-SNAPSHOT"/>
	<property name="project.package" value="de.fuberlin.wiwiss.ng4j"/>
	<property name="project.path" value="de/fuberlin/wiwiss/ng4j"/>
	<property name="src" value="src"/>
	<property name="src.tests" value="tests"/>
	<property name="src.trig.grammar" value="${src}/${project.path}/trig/parser"/>
	<property name="build" value="build"/>
	<property name="build.tests" value="build-tests"/>
	<property name="lib" value="lib"/>
	<property name="doc" value="doc"/>
	<property name="javadoc" value="${doc}/javadoc"/>
	<property name="jar" value="${lib}/${project}-${version}.jar"/>
	<property name="zip" value="${project}-${version}.zip"/>

	<path id="project.class.path">
		<fileset dir="${lib}">
			<include name="**/*.jar"/>
			<exclude name="junit.jar"/>
		</fileset>
		<pathelement path="${java.class.path}"/>
	</path>
	
	<target name="help">
		<echo>
	Usage:

	ant help    - shows this message
	ant compile - compiles the java files
	ant test    - runs JUnit tests
	ant javadoc - creates javadoc documentation
	ant jar     - creates jar file
	ant zip     - creates a release zip file
	ant all     - all of the above
	ant clean   - cleans everything created by the build process
		</echo>
	</target>
	
	<target name="clean">
		<!-- Delete all directory trees created by the build process -->
		<delete dir="${build}" failonerror="false"/>
		<delete dir="${build.tests}" failonerror="false"/>
		<delete dir="${javadoc}" failonerror="false"/>
		<delete file="${jar}" failonerror="false"/>
		<delete file="${zip}" failonerror="false"/>
		<delete file="${lib}/ng4j*jar" failonerror="false"/>
	</target>
	
	<target name="init">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
	</target>

	<target name="compile" depends="init" description="compiles ${project}">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" debug="on" source="1.5" target="1.5">
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="copyfiles" depends="init">
		<!-- Copies non-class files from source directory to
			 build directory -->
		<copy todir="${build}/">
			<fileset dir="${src}/">
				<include name="${project.path}/trix/*.xsd"/>
			</fileset>
		</copy>
	</target>

	<target name="init.tests">
		<!-- Creates the build directory for unit tests -->
		<mkdir dir="${build.tests}"/>
	</target>

	<target name="compile.tests" depends="init.tests,compile"
			description="compiles the unit tests">
		<!-- Compile the unit tests from ${src.tests} into ${build.tests} -->
		<javac srcdir="${src.tests}" destdir="${build.tests}" debug="on" source="1.5" target="1.5">
			<classpath>
				<path refid="project.class.path"/>
				<pathelement path="${build}"/>
				<pathelement path="${lib}/junit.jar"/>
			</classpath>
		</javac>
	</target>
			
	<target name="copyfiles.tests" depends="init">
		<!-- Copies non-class files from test source directory to
			 test build directory -->
		<copy todir="${build.tests}/">
			<fileset dir="${src.tests}/">
				<include name="${project.path}/trix/tests/*"/>
				<include name="${project.path}/trig/tests/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="test" depends="compile.tests,copyfiles,copyfiles.tests">
		<!-- Runs JUnit tests using the text-only TestRunner -->
		<java classname="junit.textui.TestRunner" fork="yes" failonerror="false">
			<arg value="${project.package}.AllTests"/>
			<classpath>
				<path refid="project.class.path"/>
				<pathelement path="${build}"/>
				<pathelement path="${build.tests}"/>
				<pathelement path="${lib}/junit.jar"/>
			</classpath>
		</java>
	</target>

	<target name="grammar.trig">
		<!-- Re-generates the TriG parser from the trig.g file;
			is not part of the regular build process and must be
			called explicitly when the trig.g file has changed -->
<!--
		<antlr target="${src.trig.grammar}/trig.g"
				outputdirectory="${src.trig.grammar}" />
-->
		<java classname="antlr.Tool" fork="yes" failonerror="true">
			<arg value="-o"/>
			<arg value="${src.trig.grammar}"/>
			<arg value="${src.trig.grammar}/trig.g"/>
			<classpath>
				<path refid="project.class.path"/>
			</classpath>
		</java>
	</target>

	<target name="javadoc">
		<!-- Creates javadoc documentation for the source
			 (but not for the tests) -->
		<delete dir="${javadoc}"/>
		<mkdir dir="${javadoc}"/>
		<javadoc packagenames="*"
				sourcepath="${src}"
				classpathref="project.class.path"
				destdir="${javadoc}"
				author="true"
				version="true"
				private="false"
				use="true"
				splitindex="true"
				windowtitle="${project}"
				doctitle="${project}">
			<link href="http://jena.sourceforge.net/javadoc/"/>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
		</javadoc>
	</target>

	<target name="jar" depends="test">
		<!-- Creates a distribution jar file from the compiled class
			 files (without tests) -->
		<jar jarfile="${jar}" basedir="${build}"/>
	</target>

	<target name="zip" depends="jar,javadoc">
		<!-- Creates a release zip file containing sources, tests,
			 docs (includig javadoc), the jar file, required jars,
			 and the build file. -->
		<zip destfile="${zip}"
			 basedir="."
			 excludes="${build}/** ${build.tests}/** ${zip}"/>
	</target>

	<target name="all" depends="zip"/>
</project>
